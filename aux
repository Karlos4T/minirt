	t_vec	multi_vect(const t_vec vect, const double x)
{
	return (*vec(vect.x * x, vect.y * x, vect.z * x));
}
t_vec	sub_vect(const t_vec vect1, const t_vec vect2)
{
	return (*vec(vect1.x - vect2.x, vect1.y - vect2.y, vect1.z - vect2.z));
}
v = multi_vect(cy.v, dot_product(r, cy.v));
v = sub_vect(r, v);
u = multi_vect(cy.v, dot_product(sub_vect(o, cy.o), cy.v));
u = sub_vect(sub_vect(o, cy.o), u);
a = dot_product(v, v);
b = 2 * dot_product(v, u);
c = dot_product(u, u) - pow(cy.radius, 2);

